# < This file is auto-generated. DO NOT EDIT THIS FILE. Make the edits in base/template.Dockerfile. >
#
# Installs WordPress with wp-cli (wp.cli.org) and, optionally, other tools required in a development environment.
#
# See:
#   Docker Hub: https://registry.hub.docker.com/u/conetix/wordpress-with-wp-cli/
#   Github Repo: https://github.com/conetix/docker-wordpress-wp-cli

ARG WP_IMAGE_VERSION="5.3.0-php7.2-apache"

FROM wordpress:${WP_IMAGE_VERSION}

# If environment is "dev", additional software will be installed.
ARG NODE_ENV="dev"
ENV NODE_ENV="${NODE_ENV}"

# Add sudo in order to run wp-cli as the www-data user
RUN apt-get update && apt-get install -y \
    sudo \
    less \
    vim \
    zip

# Add WP-CLI
RUN curl -o /bin/wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
COPY ./bin/wp-su.sh /bin/wp
RUN chmod +x /bin/wp-cli.phar /bin/wp

# Cleanup
RUN apt-get clean
RUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy PHP config
COPY config/php-config.ini /usr/local/etc/php/conf.d/php-config.ini
COPY config/20-xdebug.ini /root

# Define WordPress develop dir path as an environment variable
ENV WP_DEVELOP_DIR /tmp/wordpress-develop

# Define an environment variable that stores WordPress' test directory. The name of the environment variable is the
# same as the one used in bootstrap.php created by "wp scaffold plugin-tests" command. We will install the library in the
# setup-environment.sh script.
ENV WP_TESTS_DIR "${WP_DEVELOP_DIR}/tests/phpunit/"

# Copy and run the script that prepares the environment
COPY ./bin/setup-environment.sh /bin
RUN chmod +x /bin/setup-environment.sh
RUN cd /bin && ./setup-environment.sh

# Copy the script that creates the test database
COPY ./bin/create-test-db.sh /bin
COPY ./bin/db-creator.php /bin
RUN chmod +x /bin/create-test-db.sh

# Copy wait-for-db.sh
COPY ./bin/wait-for-db.sh /bin
COPY ./bin/db-conn-checker.php /bin
RUN chmod +x /bin/wait-for-db.sh

# Copy wp-tests-config.php
COPY config/wp-tests-config.php "${WP_DEVELOP_DIR}/wp-tests-config.php"

# Copy WP-CLI config and configure WP-CLI
RUN mkdir -p /var/www/.wp-cli/cache \
    && mkdir -p /var/www/.wp-cli/packages
COPY config/wp-cli.yml /var/www/.wp-cli/config.yml
ENV WP_CLI_CONFIG_PATH /var/www/.wp-cli/config.yml
ENV WP_CLI_CACHE_DIR /var/www/.wp-cli/cache
ENV WP_CLI_PACKAGES_DIR /var/www/.wp-cli/packages
RUN chown -R www-data:www-data /var/www/.wp-cli

# Add the entry point script to the image and make it executable so that Docker can run it.
COPY docker-entrypoint.sh /usr/local/bin/wordpress/
RUN chmod +x /usr/local/bin/wordpress/docker-entrypoint.sh

# Docker does not include the parent image's ENTRYPOINT and CMD. However, they are needed for the container to run
# properly. Otherwise, the functionality defined in ENTRYPOINT of the parent container is not available. See the
# wordpress/docker-entrypoint.sh file for more explanation.

# Make Docker run the entry point script. This script also runs the parent image's entry point script.
ENTRYPOINT ["/usr/local/bin/wordpress/docker-entrypoint.sh"]

# Run the command that keeps the container up. This is directly retrieved from the base image's Dockerfile.
CMD ["apache2-foreground"]

# < This file is auto-generated. DO NOT EDIT THIS FILE. Make the edits in base/template.Dockerfile. >